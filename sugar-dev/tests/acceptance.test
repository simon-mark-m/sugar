#
# Unit testing template

# assume the tests are in the same location as the package
::tcl::tm::path add [file dirname [pwd]]

# Use Tcltest. Its not perfect but its simple and commonly available
package require Tcl 8.6
package require tcltest 2.4.1
source "../sugar.tcl"

eval tcltest::configure $argv

# ----------------------------------------------------------------------------
# Acceptance tests.
#
# These are tests aimed at the package as a whole. 
# I'm constructing these first as the package did not start life with tests. 
# So, need to create some kind of baseline / coverage before trying to
# isolate stuff or test
# -----------------------------------------------------------------------------

namespace import tcltest::test
namespace eval ::acceptance::test {
    namespace import ::tcltest::*

    set SETUP {
        set res {}
    }
    set CLEANUP {
        namespace delete macro-namespace
        unset res
    }

    # -------------------------------------------------------------------------

    set basic_snippet1 {
    # sugared procs, no macros
        namespace eval macro-namespace {

        # proc using no macros
            sugar::proc ok-proc {} {
                return ok
            }
            sugar::proc hot-drink {} {
                list coffee 
            }
            sugar::proc get-drink {} {
                hot-drink
            }
            proc two-sugars {} {
                return [list two sugars]
            }
            proc sugar? {} {
                return [list one sugar]
            }

            # test calling them (in a sugared proc)
            sugar::proc result {} {
                lappend result [ok-proc]
                lappend result [get-drink]
                lappend result [sugar?]
                return $result
            }
        }
    }

    set basic_snippet2 {
    # sugared procs with macro
        namespace eval macro-namespace {

        # proc using no macros
            sugar::proc ok-proc {} {
                return ok
            }
            # macro that inlines creating a list
            sugar::macro hot-drink {cmd} {
                list list coffee 
            }
            # proc that uses a macros
            sugar::proc get-drink {} {
                hot-drink
            }
            # regular proc
            proc two-sugars {} {
                return [list two sugars]
            }
            # replace the sugar? proc from snippet1 with a
            # macro that inlines the regular proc above
            sugar::macro sugar? {cmd} {
                list two-sugars
            }

            # test calling them (in a sugared proc)
            sugar::proc result {} {
                lappend result [ok-proc]
                lappend result [get-drink]
                lappend result [sugar?]
                return $result
            }
        }
    }

    # -------------------------------------------------------------------------

    test acceptance_basic_1 {
        Run code with sugared procs, but no macros to substitute
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $basic_snippet1
        return [macro-namespace::result]

    } -result {ok coffee {one sugar}} -match glob

    # -------------------------------------------------------------------------

    test acceptance_basic_2 {
        Run code with sugared procs, with  macros to substitute
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $basic_snippet2
        return [macro-namespace::result]

    } -result {ok coffee {two sugars}} -match glob

    # -------------------------------------------------------------------------

    test acceptance_basic_3 {
        Sanity check, examine the procs in the namespace
        i.e. the macros leave nothing behind
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $basic_snippet2
        return [lsort [lmap procname \
            [info procs macro-namespace::*] \
            {namespace tail $procname}]]

    } -result {get-drink ok-proc result two-sugars} -match glob

    # -------------------------------------------------------------------------

    # -------------------------------------------------------------------------

    # Using sugar as a static checker, i.e. creating macros for procs, existing
    # or otherwise, that do some check before returning the same command  the
    # user entered.

    set SETUP {
        set res {}
    }
    set CLEANUP {
        namespace delete checker-namespace
        unset res
    }
    set checker_snippet1 {
        namespace eval checker-namespace {
        # a proc we're going to have a macro checker for
        
            proc brew {drink} {
                switch $drink {
                    "tea" {
                        return "An English tipple"
                    }
                    "coffee" {
                        return "The most popular drug in America"

                    }
                    "beer" {
                        return "The real stuff"
                    }
                    default {
                        return "What are you drinking?"
                    }
                }
            }
            
            # now a macro that will check for errors, note, we can't check for
            # value errors. That's done at runtime
            sugar::macro brew {cmd drink} {

                set drinks {tea coffee beer}

                # if the option was not a literal, we have no way of checking
                # what the arguments might be
                set first [string index $drink 0]
                if {$first eq {$}}                      {return [list $cmd $drink]}
                if {$first eq {[}}                      {return [list $cmd $drink]}
                if {[string range $drink 0 2] eq {{*}}} {return [list $cmd $drink]}

                # but if it *was* a literal, we can check a correct one was given
                if {$drink ni $drinks} {
                    # In real life, this would probably just put a warning, but
                    # for testing purposes we'll make a static check result in error
                    error  "Error: invalid option $drink in [sugar::currentProcName]"

                }

                # we don't want to alter the command, so just return it as is
                return [list $cmd $drink]
            }

            # these procs are only needed because tcltest itself is not wrapped
            # in a sugar proc
            sugar::proc tea {} {
                brew tea
            }
            sugar::proc coffee {} {
                brew coffee
            }
            sugar::proc any {drink_type} {
                brew $drink_type
            }

        }
    }

    # -------------------------------------------------------------------------

    test acceptance_checker_1 {
        Call the checker macro command with a valid call
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $checker_snippet1
        set res [checker-namespace::tea]

    } -result {An English tipple}

    # -------------------------------------------------------------------------

    test acceptance_checker_2 {
        Check that adding a sugared proc that fails the check will blow up
    } -setup $SETUP -cleanup $CLEANUP -body {

        # create the namespace
        if {1} $checker_snippet1 

        # add in a new sugared proc that uses a macro 'brew' with static checks
        namespace eval checker-namespace {
            sugar::proc water {} {
                brew water
            }
        }

    } -returnCodes error -result {Macro 'brew' expansion error in procedure '::acceptance::test::checker-namespace::water': Error: invalid option water in ::acceptance::test::checker-namespace::water}

    # -------------------------------------------------------------------------

    test acceptance_checker_3 {
        Call with a substitution argument, i.e. we can't check it
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $checker_snippet1
        set res [checker-namespace::any coffee]
        return $res

    } -result {The most popular drug in America}

    # -------------------------------------------------------------------------

    test acceptance_checker_4 {
        Call with a substitution argument, i.e. we can't check it
        AND the argument is invalid
        (just confirming all results work, we already know the macro didn't fail
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $checker_snippet1
        set res [checker-namespace::any scotch]
        return $res

    } -result {What are you drinking?}

    # -------------------------------------------------------------------------

    test acceptance_checker_5 {
        What if the first argument is an expansion operator? i.e.
        some-proc {*}$a_list
        This is really just checking the snippet code, but leaving here as a
        TODO: Common check for $, [, and {*} in macros
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $checker_snippet1
        
        # add in a new sugared proc that uses a macro 'brew' {*} 
        namespace eval checker-namespace {
            sugar::proc glass-of {args} {
                brew {*}$args
            }
        }
        set res [checker-namespace::glass-of water]

    } -result {What are you drinking?}

    # -------------------------------------------------------------------------
    
    # -------------------------------------------------------------------------

    # Using sugar for a control structure, overlaps with the above tests, but
    # is a useful example in its own right

    set SETUP {
        set res {}
    }
    set CLEANUP {
        namespace delete control-namespace
        unset res
    }

    set control_snippet1 {
        namespace eval control-namespace {

            sugar::macro cond {cmd args} {

                if {[llength $args] != 3} {
                    error "wrong number of arguments"
                }

                foreach {cond val1 val2} $args break
                list if $cond [list [list format $val1]] [list [list format $val2]]

            }

            # we only need this wrapper to 'sugar' the call the 'cond' for
            # testing purposes
            sugar::proc do-cond {} {

                set x 1
                lappend res [cond {$x > 0} 1 0]

                set x 0
                lappend res [cond {$x > 0} 1 0]

                return $res

            }

            namespace export cond
        }
    }

    # -------------------------------------------------------------------------

    test acceptance_control_1 {
        USe our new macro implemented operator
    } -setup $SETUP -cleanup $CLEANUP -body {

        if {1} $control_snippet1

        # this works, macros are effectively 'global'
        sugar::proc call-from-here {} {
            set x 1
            return [cond {$x > 0} 1 0]
        }

        lappend res [control-namespace::do-cond]
        lappend res [call-from-here]

    } -result {{1 0} 1}

    # -------------------------------------------------------------------------




    cleanupTests
}
namespace delete ::acceptance::test
